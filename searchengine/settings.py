"""
Django settings for searchengine project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import networkx as nx

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'p(yy30*-h!u_q&@@e-v5$9%f(ok!@degk5ua@@u_m7o9oeb**z'

import ahocorasick
from nltk.corpus import stopwords
Q =ahocorasick.Automaton()
data=[]
embedingMatrix = []
entitity_list=[]
stop_words = set(stopwords.words('english'))

 #print "bigrams"
stop_words = set(stopwords.words('english'))

idx =0


T =ahocorasick.Automaton()
B =ahocorasick.Automaton()
E =ahocorasick.Automaton()


G=nx.DiGraph()
#es = Elasticsearch([{'host': 'localhost', 'port': 9200}])
stop_words = set(stopwords.words('english'))
i=0

with open("categoryAndTheirSubcategories",'r') as edges:

    for line in edges:
        line=line.rstrip()
        idx=idx+1
	data1=[]
        data2=[]
        d1_string=''
        d2_string=''
        toks=line.split('\t')
        list1 = toks[0].split('_')
        for word in list1:
            if word not in stop_words:
                #data1.append(word)
                d1_string=d1_string+' '+word
        d1_string = d1_string[1:]

        list2 = toks[1].split('_')
        for word in list2:
            if word not in stop_words:
                #data2.append(word)
                d2_string=d2_string+' '+word
        d2_string = d2_string[1:]
        #tech_file.write(d2_string.lower()+' '+d1_string.lower()+"\n")
        #print d2_string.lower(), d1_string.lower()
        G.add_edge(d2_string.lower(),d1_string.lower())

"""
with open('FinalrankingMapfile') as file:
    for line in file:
      idx=idx+1
      if idx == 100:
        break
      sen = line.split('\t')[0].rstrip().replace('_',' ')
      tokens=filter(lambda w: not w in stop_words,sen.split())
      valstr=""
      if(len(tokens)==1):
        #print tokens[0]
        Q.add_word(str(tokens[0]).lower(), (line.split('\t')[1][:len(line.split('\t')[1])-1],str(tokens[0]).lower()))    
      else:
        for x in range(0,len(tokens)):
          if x== len(tokens)-1:
            valstr = valstr+tokens[x]
          else:
            valstr = valstr+tokens[x]+" "
        #print valstr
        valstr = valstr.lower()
        Q.add_word(str(valstr), (line.split('\t')[1][: len(line.split('\t')[1])-1],str(valstr)))

      
print "Graph formation complete..."


T =ahocorasick.Automaton()
B =ahocorasick.Automaton()
E =ahocorasick.Automaton()

print "bigrams"
idx=0
stop_words = set(stopwords.words('english'))
with open('sorted_BIz.txt') as file:
    for line in file:
        idx=idx+1
        if idx==70:
            break
        sen = line.split('\t')[1].rstrip().replace('_',' ')
        tokens=filter(lambda w: not w in stop_words,sen.split())
        valstr=""
        if(len(tokens)==1):
            B.add_word(tokens[0].lower(), (line.split('\t')[0],tokens[0].lower()))    
        else:
            for x in range(0,len(tokens)):
                if x== len(tokens)-1:
                    valstr = valstr+tokens[x]
                else:
                    valstr = valstr+tokens[x]+" "
            B.add_word(valstr.lower(), (line.split('\t')[0],valstr.lower()))

idx=0
with open('sorted_Tech.txt') as file:
    for line in file:
        idx=idx+1
        if idx==50:
            break
        sen = line.split('\t')[1].rstrip().replace('_',' ')
        tokens=filter(lambda w: not w in stop_words,sen.split())
        valstr=""
        if(len(tokens)==1):
            T.add_word(tokens[0].lower(), (line.split('\t')[0],tokens[0].lower()))    
        else:
            for x in range(0,len(tokens)):
                if x== len(tokens)-1:
                    valstr = valstr+tokens[x]
                else:
                    valstr = valstr+tokens[x]+" "
            T.add_word(valstr.lower(), (line.split('\t')[0],valstr.lower()))
    
idx=0
with open('sorted_Energy.txt') as file:
    for line in file:
        idx=idx+1
        if idx==90:
            break
        sen = line.split('\t')[1].rstrip().replace('_',' ')
        tokens=filter(lambda w: not w in stop_words,sen.split())
        valstr="" 
        if(len(tokens)==1):
            E.add_word(tokens[0].lower(), (line.split('\t')[0],tokens[0].lower()))    
        else:
            for x in range(0,len(tokens)):
                if x== len(tokens)-1:
                    valstr = valstr+tokens[x]
                else:
                    valstr = valstr+tokens[x]+" "
            E.add_word(valstr.lower(), (line.split('\t')[0],valstr.lower()))"""

print "done till hhere"
# SECURITY WARNING: don't run with debug turned on in production!


DEBUG = True


EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'testbobxpo@gmail.com'
EMAIL_HOST_PASSWORD = 'noreplybob'
DEFAULT_FROM_EMAIL = 'testbobxpo@gmail.com'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'




ALLOWED_HOSTS = []

#SITE_ID = "597fb8b29565734e4223cb35"
SITE_ID="5a087668956573e3c7df5740"
# Application definition

INSTALLED_APPS = [
    'crawler',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangotoolbox',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'searchengine.urls'

print os.path.join(BASE_DIR,'crawler/templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'crawler/templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_LOADERS=(
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)

WSGI_APPLICATION = 'searchengine.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {  
    'default': {  
        'ENGINE': 'django_mongodb_engine',  
        'NAME': 'mydatabase',  
        'USER': '',  
        'PASSWORD': '',  
        'HOST': 'localhost',  
        'PORT': '27017',  
        'SUPPORTS_TRANSACTIONS': False,  
    },  
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

